// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  id  String  @id @default(cuid())
  username  String @db.VarChar(255) 
  email String @unique
  addres String? @db.VarChar(255)
  phone  String? @db.VarChar(20)
  provider  Provider @default(local)
  role      Role    @default(user)
  path_image String? @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  credential Credentials? 
  user_oauth UserOauth?
  order  Orders[]
  like Likes[]
  reports Reports[]
}

model Credentials {
  user_id   String    @id
  password  String    @db.VarChar(255)                

  user      Users      @relation(fields: [user_id], references: [id])
}

model UserOauth{
  user_id String @id    
  oauthId   String    

  user Users @relation(fields: [user_id], references: [id])
}

model Products {
  sku  String  @id @default(cuid())
  name  String @db.VarChar(255) 
  price  Decimal 
  description  String @db.Text
  stock  Int
  path_image String @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order_item OrderItem[]
}

model Orders {
  id  String  @id @default(cuid())
  user_id String 
  status OrderStatus @default(pending)
  quantity  Int
  total_price  Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user Users @relation(fields: [user_id], references: [id] )

  order_item OrderItem[]
  like Likes[]
  payment Payments[]
}

model OrderItem {
  order_id String 
  product_sku String 
  quantity  Int
  price_at_purchase  Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([order_id, product_sku]) 
  
  order Orders @relation(fields: [order_id], references: [id],onDelete: Cascade)
  product Products @relation(fields: [product_sku], references: [sku],onDelete: NoAction)
}

model Likes{
  user_id String
  order_id String
  rating Int
  @@id([user_id, order_id])

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order Orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Reports{
  id  String  @id @default(cuid())
  user_id String
  type ReportType
  description String
  amount Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user Users @relation(fields: [user_id], references: [id], onDelete: NoAction)
}

model Payments{
  sku  String  @id @default(cuid())
  order_id String
  method MethodPayment 
  status StatusPayment @default(pending)
  paid_at DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order Orders @relation(fields: [order_id], references: [id],onDelete: NoAction)
}

model Tanks{
  id  String  @id @default(cuid())
  current_volume Decimal
  max_cappacity Decimal
  is_warning Boolean
  last_reset_at DateTime @default(now())
}

enum Provider {
  local
  google
  github
}

enum Role {
  superadmin
  admin
  user
}

enum ReportType {
  income
  expense
}

enum OrderStatus {
  pending
  confirmed
  canceled
  delivered
}

enum MethodPayment {
  manual_transfer
  qris
}

enum StatusPayment {
  pending
  confirmed
  failed
  expired
}